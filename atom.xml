<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Delightful App Blog]]></title>
  <subtitle><![CDATA[Free and Open Source Trovebox client for iPhone. <a href="http://getdelightfulapp.com">More info here</a>.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://delightfulapp.github.io/blog/"/>
  <updated>2015-02-04T01:07:17.935Z</updated>
  <id>http://delightfulapp.github.io/blog/</id>
  
  <author>
    <name><![CDATA[Delightful for iPhone]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Delightful 2.1.2]]></title>
    <link href="http://delightfulapp.github.io/blog/2015/02/04/Delightful-2-1-2/"/>
    <id>http://delightfulapp.github.io/blog/2015/02/04/Delightful-2-1-2/</id>
    <published>2015-02-04T00:32:03.000Z</published>
    <updated>2015-02-04T01:07:03.000Z</updated>
    <content type="html"><![CDATA[<p><img src="Delightful app update review timeline" alt="https://dl.dropboxusercontent.com/u/2476826/delightful2.1.2-review-timeline.png"></p>
<p>Finally! After 21 (TWENTY) days being stuck in App Store review process, Delightful 2.1.2 is approved and available in the App Store.</p>
<a id="more"></a>

<p>The first rejection was because of the icon which was unfortunate because <a href="blog.getdelightfulapp.com/2015/01/22/New-Icon/">I really liked that icon</a>. The second rejection was because there was a bug with the uploading feature. The app claimed that the upload was successful yet the photo wasn’t uploaded. This was because Trovebox <em>unfortunately</em> entered the read-only mode starting January 24.</p>
<p><blockquote class="twitter-tweet" lang="en"><p>All hosted Trovebox accounts are now in read-only mode. Sign in and see our announcement here, <a href="https://t.co/fLAxmIpqHW" target="_blank" rel="external">https://t.co/fLAxmIpqHW</a></p>&mdash; Trovebox (@trovebox) <a href="https://twitter.com/trovebox/status/559236072312283136" target="_blank" rel="external">January 25, 2015</a></blockquote></p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Normally developer needs to re-submit update and wait again when the app/update is rejected. But since this was fixable from the server side, I could simply requested the app reviewer to review the app again. And it worked! They reviewed and approved it swiftly. </p>
<p><img src="Delightful2.1.2 update notes" alt="https://dl.dropboxusercontent.com/u/2476826/delightful2.1.2-updates.png"></p>
<p>So what’s new in this version? A lot. Bug fixes and some new features:</p>
<ul>
<li>Optional Title and Description for photos to upload.</li>
<li>Option to resize photos after upload to save storage space in your device.</li>
<li>Remember user’s choice on Resize after upload option.</li>
<li>Guest access. User can skip login but will only see public photos/albums/tags and cannot upload.</li>
<li>Favoriting a photo will tag the photo with “Favorites” tag. </li>
<li>Migrate previous locally favorited photos to Favorites tag</li>
<li>Show indicator when migrating favorites.</li>
<li>Show indicator when syncing favorites.</li>
<li>Separate share link and share image.</li>
<li>Loading indicator on title view to indicate synchronization in operation.</li>
</ul>
<p>The update should be available in your App Store by now. Don’t forget to rate it! :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="Delightful app update review timeline" alt="https://dl.dropboxusercontent.com/u/2476826/delightful2.1.2-review-timeline.png"></p>
<p>Finally! After 21 (TWENTY) days being stuck in App Store review process, Delightful 2.1.2 is approved and available in the App Store.</p>
]]>
    
    </summary>
    
      <category term="ios" scheme="http://delightfulapp.github.io/blog/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[New Icon]]></title>
    <link href="http://delightfulapp.github.io/blog/2015/01/22/New-Icon/"/>
    <id>http://delightfulapp.github.io/blog/2015/01/22/New-Icon/</id>
    <published>2015-01-22T09:19:11.000Z</published>
    <updated>2015-01-22T09:56:03.000Z</updated>
    <content type="html"><![CDATA[<p>Here we go again with the abruptness of Apple App Store Review process. The update for Delightful was rejected because according to the reviewer it violated the <a href="https://developer.apple.com/app-store/review/guidelines/#trademarks-trade-dress" target="_blank" rel="external">rule 8.3</a>:</p>
<blockquote>

<p>Apps that appear confusingly similar to an existing Apple product, interface, or advertising theme will be rejected.</p>
<footer><strong>Apple </strong><cite><a href="https://developer.apple.com/app-store/review/guidelines/" target="_blank" rel="external">App Store Review Guidelines</a></cite></footer></blockquote>


<a id="more"></a>

<p>Specifically they said Delightful’s icon is <em>confusingly</em> similar to the iCloud logo. They didn’t have problem when the app was submitted the first time. Now they do. I could argue that Delightful’s icon and iCloud are different especially the color. Not to mention that the cloud shape is a <a href="https://www.google.co.jp/search?q=cloud+icon&amp;es_sm=91&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=4sXAVPj8E8WomgXs-4KoBw&amp;ved=0CAgQ_AUoAQ&amp;biw=1361&amp;bih=673" target="_blank" rel="external">pretty generic cloud icon</a>. But from my experience, it is unlikely for Apple Reviewer to change their decision. </p>
<p>Since I don’t want to delay the update any longer, I submitted the update with a new icon. No more cloud shape. Screw the cloud. I’m going with bubbles now. Bubbles are cool.</p>
<p><img src="http://f.cl.ly/items/3d3U3V1N0W153G2Z0Y0D/delightful-icon.png" alt="Delightful App New Icon"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Here we go again with the abruptness of Apple App Store Review process. The update for Delightful was rejected because according to the reviewer it violated the <a href="https://developer.apple.com/app-store/review/guidelines/#trademarks-trade-dress" target="_blank" rel="external">rule 8.3</a>:</p>
<blockquote>

<p>Apps that appear confusingly similar to an existing Apple product, interface, or advertising theme will be rejected.</p>
<footer><strong>Apple </strong><cite><a href="https://developer.apple.com/app-store/review/guidelines/" target="_blank" rel="external">App Store Review Guidelines</a></cite></footer></blockquote>


]]>
    
    </summary>
    
      <category term="ios" scheme="http://delightfulapp.github.io/blog/tags/ios/"/>
    
      <category term="development" scheme="http://delightfulapp.github.io/blog/tags/development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Multiple Photos Selection for Delightful Upload Feature]]></title>
    <link href="http://delightfulapp.github.io/blog/2014/11/30/Multiple-photos-selection-for-Delightful-Upload-feature/"/>
    <id>http://delightfulapp.github.io/blog/2014/11/30/Multiple-photos-selection-for-Delightful-Upload-feature/</id>
    <published>2014-11-30T01:07:54.000Z</published>
    <updated>2014-11-30T01:50:20.000Z</updated>
    <content type="html"><![CDATA[<p>For Deligthful upload feature, there are some features I want to have when selecting photos:</p>
<ol>
<li>Drag to select multiple photos quickly.</li>
<li>Being able to preview a photo. Either by tap and hold the photo or pinch out the photo.</li>
</ol>
<a id="more"></a>

<p>I chose to use the new Photos framework instead of Assets Library since Delightful only supports iOS 8 or later. Another thing is I chose to use the new UISplitViewController since it now is available on the iPhone. And using UISplitViewController, albums and photos apear side by side in landscape mode. The result is <a href="https://github.com/nicnocquee/DLFPhotosPicker" target="_blank" rel="external">DLFPhotosPicker</a>.</p>
<p><img src="https://raw.githubusercontent.com/nicnocquee/DLFPhotosPicker/master/screenshots/iOS%20Simulator%20Screen%20Shot%20Nov%2030,%202014,%2009.38.34.png" alt=""></p>
<p>I’d like include DLFPhotosPicker in cocoapods but I still haven’t figured out how to include PhotosPicker.storyboard in the pod. Any advice is greatly appreciated.</p>
<p align="center">
<video width="320" controls>
  <source src="http://f.cl.ly/items/2K1m2f2W1L1v0a090o0q/demo-11.mov" type="video/mp4">
  Your browser does not support the video tag.
</video>
</p>]]></content>
    <summary type="html">
    <![CDATA[<p>For Deligthful upload feature, there are some features I want to have when selecting photos:</p>
<ol>
<li>Drag to select multiple photos quickly.</li>
<li>Being able to preview a photo. Either by tap and hold the photo or pinch out the photo.</li>
</ol>
]]>
    
    </summary>
    
      <category term="ios" scheme="http://delightfulapp.github.io/blog/tags/ios/"/>
    
      <category term="development" scheme="http://delightfulapp.github.io/blog/tags/development/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Developing Offline Support for Delightful App]]></title>
    <link href="http://delightfulapp.github.io/blog/2014/10/31/Developing-Offline-Support-for-Delightful-app/"/>
    <id>http://delightfulapp.github.io/blog/2014/10/31/Developing-Offline-Support-for-Delightful-app/</id>
    <published>2014-10-31T10:25:16.000Z</published>
    <updated>2014-10-31T12:28:28.000Z</updated>
    <content type="html"><![CDATA[<p>Offline photos browsing has been one of the features I have planned since the beginning for Delightful app. Core Data was of course the first thing I considered. However, since I use <a href="https://github.com/Mantle/Mantle" target="_blank" rel="external">Mantle</a> to simplify the model layer and JSON serialization, I couldn’t figure out a simple way to mix it with Core Data. In the first version of the app I ended up using simple cache mechanism using <a href="https://github.com/tumblr/TMCache" target="_blank" rel="external">TMCache</a>. But the performance was not so good especially when caching thousand of photos.</p>
<a id="more"></a>

<p>I tried using <a href="http://realm.io" target="_blank" rel="external">Realm database</a> when it became popular. Unfortunately I need to subclass <code>RLMObject</code> for my models and I was reluctant to replace Mantle. I also hit a problem where the database size increases exponentially when using Realm (although they claimed that <a href="https://twitter.com/realm/status/521884663313211392" target="_blank" rel="external">this issue has been fixed</a>). After that I considered of using SQL via Marco Arment’s <a href="https://github.com/marcoarment/FCModel" target="_blank" rel="external">FCModel</a>. But then somebody mentioned about <a href="https://github.com/yapstudios/YapDatabase" target="_blank" rel="external">YapDatabase</a>.</p>
<p>YapDatabase has one feature that I love instantly which is I can keep using my model class without subclassing any specific classes. I can keep using Mantle and my objects can be stored to database. YapDatabase also has splendid <a href="https://github.com/yapstudios/YapDatabase/wiki" target="_blank" rel="external">documentations</a>. Another thing I like from YapDatabase is how it is designed to help developing iOS app faster by not only tackling the database part but also its interaction with the user interface. </p>
<p>YapDatabase has an interesting extension called Views to display data from database. A View is basically a table in database. We provide grouping/filtering and sorting block when initializing a View to sort, filter, and group data from database. After registering this View to the database, anytime we insert new object to the database, the grouping/filtering and sorting block will be triggered and the reference to that object will be stored in the View’s table in database. For example in Delightful app, I register a View for each of the albums so that when a <code>Photo</code> object is inserted to database, it will also be “saved” to the album Views it belongs to. And if I want to display photos in an album, I can just load the album View and the photos will appear <em>almost</em> instantly.</p>
<p>There is a problem with YapDatabase’s View registration. It enumerates the database to populate View. In result, it takes a few seconds to complete when there are tons of photos in database. In iPhone 5s with 7000 photos in database, it took around 10 seconds to register a View to show photos in an album. I already asked for tips from YapDatabase developer to speed up View registration, and he said <a href="https://github.com/yapstudios/YapDatabase/issues/124" target="_blank" rel="external">skipping initial View population</a> is in todo list.</p>
<p>In the mean time, I design the app to fetch albums and tags first before fetching photos, then create a View for each of the albums and each of the tags during first launch. And since there are no photos yet, the initial View population completes quickly. The problem is of course when there are already many photos in database and the app receives a new album. But I figure I can inform user that the app is preparing database or something.</p>
<p>The app still needs some UI tweaks to support iOS 8. I’ll submit it as soon as I’m done with it. Uploading feature is postponed until offline feature is live in the app store.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Offline photos browsing has been one of the features I have planned since the beginning for Delightful app. Core Data was of course the first thing I considered. However, since I use <a href="https://github.com/Mantle/Mantle" target="_blank" rel="external">Mantle</a> to simplify the model layer and JSON serialization, I couldn’t figure out a simple way to mix it with Core Data. In the first version of the app I ended up using simple cache mechanism using <a href="https://github.com/tumblr/TMCache" target="_blank" rel="external">TMCache</a>. But the performance was not so good especially when caching thousand of photos.</p>
]]>
    
    </summary>
    
      <category term="ios" scheme="http://delightfulapp.github.io/blog/tags/ios/"/>
    
      <category term="development" scheme="http://delightfulapp.github.io/blog/categories/development/"/>
    
  </entry>
  
</feed>
